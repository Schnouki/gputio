#!/usr/bin/env python2
# -*- mode: python -*-
#
# Copyright (c) 2010, 2011  Thomas Jost <schnouki@schnouki.net>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

# {{{ Imports and constants
import ConfigParser
import gettext
import locale
import os
import os.path
import sys
import threading
import time
import traceback

import putio
import pycurl

import pygtk
pygtk.require('2.0')
import gio
import glib
import gobject
import gtk

# Mapping between Put.io file type and Gtk icon names.
TYPE_TO_ICON = {
    "audio":      "sound",
    "compressed": "package",
    "file":       "unknown",
    "folder":     "folder",
    "image":      "image",
    "movie":      "video-x-generic",
    "ms_doc":     "document",
    "pdf":        "document",
    "text":       "txt",
    "swf":        "shellscript",
    }
# }}}

class GPutIO(object):
    # {{{ Initialization
    def __init__(self, username, password, apikey, apisecret):
        # {{{ Main window
        self.win = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.win.set_title("GPutio")
        self.win.set_default_size(640, 480)
        self.win.connect("destroy", self.destroy)
        vbox = gtk.VBox()
        self.win.add(vbox)
        vpaned = gtk.VPaned()
        vbox.pack_start(vpaned)
        # }}}
        # {{{ Status bar
        self.status = gtk.Statusbar()
        vbox.pack_start(self.status, expand=False)
        self.sb_ctxt = {}
        self.sb_ctxt["files"] = self.status.get_context_id("files")
        self.sb_ctxt["hint"]  = self.status.get_context_id("hint")
        self.sb_ctxt["queue"] = self.status.get_context_id("queue")
        # }}}
        # {{{ Frames, alignments, and horizontal boxes
        frm_files = gtk.Frame(_("<b>Your files</b>"))
        frm_files.get_label_widget().set_use_markup(True)
        align_files = gtk.Alignment(.5, .5, 1., 1.)
        align_files.set_padding(2, 0, 12, 0)
        frm_files.add(align_files)
        vpaned.pack1(frm_files, resize=True)
        hbox_files = gtk.HBox()
        align_files.add(hbox_files)

        frm_dl = gtk.Frame(_("<b>Download queue</b>"))
        frm_dl.get_label_widget().set_use_markup(True)
        align_dl = gtk.Alignment(.5, .5, 1., 1.)
        align_dl.set_padding(2, 0, 12, 0)
        frm_dl.add(align_dl)
        vpaned.pack2(frm_dl, resize=False)
        hbox_dl = gtk.HBox()
        align_dl.add(hbox_dl)
        # }}}
        # {{{ Frames and scrolled windows for TreeViews
        ff = gtk.Frame()
        hbox_files.pack_start(ff)
        swf = gtk.ScrolledWindow()
        swf.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        ff.add(swf)

        fd = gtk.Frame()
        hbox_dl.pack_start(fd)
        swd = gtk.ScrolledWindow()
        swd.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        fd.add(swd)
        # }}}
        # {{{ Toolbars
        tb_files = gtk.Toolbar()
        tb_files.set_orientation(gtk.ORIENTATION_VERTICAL)
        tb_files.set_style(gtk.TOOLBAR_ICONS)
        hbox_files.pack_start(tb_files, expand=False)

        tb_dl = gtk.Toolbar()
        tb_dl.set_orientation(gtk.ORIENTATION_VERTICAL)
        tb_dl.set_style(gtk.TOOLBAR_ICONS)
        hbox_dl.pack_start(tb_dl, expand=False)

        # Toolbar buttons
        tb_files.insert_stock(gtk.STOCK_REFRESH, _("Refresh files list"), None, self.refresh, None, -1)
        tb_files.append_space()
        tb_files.insert_stock(gtk.STOCK_SAVE, _("Download the selection"), None, self.download, None, -1)
        tb_files.insert_stock(gtk.STOCK_DELETE, _("Remove the selection"), None, self.remove, None, -1)

        tb_dl.insert_stock(gtk.STOCK_CANCEL, _("Cancel current download"), None, self.cancel_download, None, -1)
        tb_dl.insert_stock(gtk.STOCK_DELETE, _("Remove the selection from the download queue"), None, self.remove_download, None, -1)
        # }}}
        # {{{ TreeViews and data stores
        # Data stores
        # - TreeStore for the files tree: name, size, icon, ID, URL, full path
        self.tree = gtk.TreeStore(str, long, gtk.gdk.Pixbuf, int, str, str)
        # - ListStore for the downloads: order, name, URL, total size, downloaded size, current speed
        self.list = gtk.ListStore(int, str, str, long, long, float)
        self.dl_id = 0

        # TreeView for the files tree
        self.tvf = gtk.TreeView(self.tree)
        swf.add(self.tvf)
        self.tvf.set_enable_tree_lines(True)
        self.tvf.set_search_column(0)
        self.tvf.set_rules_hint(True)
        self.tvf.get_selection().set_mode(gtk.SELECTION_MULTIPLE)

        # TreeView for the downloads list
        self.tvd = gtk.TreeView(self.list)
        swd.add(self.tvd)
        self.tvd.set_search_column(1)
        self.tvd.set_rules_hint(True)
        self.tvd.get_selection().set_mode(gtk.SELECTION_MULTIPLE)

        # Cell renderers
        cell_txt = gtk.CellRendererText()
        cell_txt_right = gtk.CellRendererText()
        cell_txt_right.set_property("xalign", 1.0)
        cell_pb = gtk.CellRendererPixbuf()
        cell_prog = gtk.CellRendererProgress()

        # Add columns
        tvc = gtk.TreeViewColumn(_("Name"))
        tvc.pack_start(cell_pb, expand=False)
        tvc.pack_start(cell_txt)
        tvc.add_attribute(cell_txt, "text", 0)
        tvc.add_attribute(cell_pb, "pixbuf", 2)
        tvc.set_expand(True)
        tvc.set_resizable(True)
        tvc.set_sort_column_id(0)
        self.tvf.append_column(tvc)

        tvc = gtk.TreeViewColumn(_("Size"), cell_txt_right)
        tvc.set_cell_data_func(cell_txt_right, self._render_size)
        tvc.set_min_width(80)
        tvc.set_resizable(True)
        tvc.set_sort_column_id(1)
        self.tvf.append_column(tvc)

        tvc = gtk.TreeViewColumn(_("File name"), cell_txt, text=1)
        tvc.set_sort_column_id(1)
        tvc.set_expand(True)
        tvc.set_resizable(True)
        self.tvd.append_column(tvc)

        tvc = gtk.TreeViewColumn(_("Progress"), cell_prog)
        tvc.set_cell_data_func(cell_prog, self._render_progress)
        tvc.set_sort_column_id(4)
        tvc.set_min_width(150)
        tvc.set_resizable(True)
        self.tvd.append_column(tvc)

        tvc = gtk.TreeViewColumn(_("Speed"), cell_txt_right)
        tvc.set_cell_data_func(cell_txt_right, self._render_speed)
        tvc.set_sort_column_id(5)
        tvc.set_min_width(100)
        tvc.set_resizable(True)
        self.tvd.append_column(tvc)

        tvc = gtk.TreeViewColumn(_("ETA"), cell_txt_right)
        tvc.set_cell_data_func(cell_txt_right, self._render_eta)
        tvc.set_min_width(100)
        tvc.set_resizable(True)
        self.tvd.append_column(tvc)

        self.tvd.set_tooltip_column(1)

        # Default sorting order
        self.tree.set_sort_column_id(0, gtk.SORT_ASCENDING)
        self.list.set_sort_column_id(0, gtk.SORT_ASCENDING)
        # }}}
        # {{{ API init
        self.api = putio.Api(apikey, apisecret)
        self.username = username
        self.password = password
        # }}}
        # {{{ Icons
        self.theme = gtk.icon_theme_get_default()
        self.icons = {}
        # }}}
        # {{{ Download manager
        self.dl_event = threading.Event()
        self.dl_cancel = False
        self.dl_quit = False
        self.dl_cur_id = -1
        self.dl_thr = threading.Thread(target=self._download_thread)
        self.dl_thr.daemon = True
        self.dl_thr.start()
        # }}}
        # {{{ Application startup
        self.win.show_all()
        self.refresh()
        # }}}

    # Quit the app
    def destroy(self, widget, data=None):
        self.dl_cancel = True
        self.dl_quit = True
        self.dl_event.set()
        self.dl_thr.join()
        gtk.main_quit()
    # }}}
    # {{{ CellRenderer callbacks
    # Render the ETA of a download in a CellRenderer
    def _render_eta(self, col, cell, model, iter, data=None):
        total_size, size, speed = model.get(iter, 3, 4, 5)
        eta = []
        if speed > .001:
            eta_s = int((total_size - size) / speed)
            eta_m, s = divmod(eta_s, 60)
            eta_h, m = divmod(eta_m, 60)
            eta_d, h = divmod(eta_h, 24)
            y, d = divmod(eta_d, 365)
            if y > 0:
                eta.append(locale.format_string(_("%d y"), y))
            if d > 0:
                eta.append(locale.format_string(_("%d d"), d))
            if h > 0:
                eta.append(locale.format_string(_("%d h"), h))
            if m > 0:
                eta.append(locale.format_string(_("%d m"), m))
            if s > 0 or len(eta) == 0:
                eta.append(locale.format_string(_("%d s"), s))
        eta = " ".join(eta)
        cell.set_property("text", eta)

    # Render the progress of a download in a CellRenderer
    def _render_progress(self, col, cell, model, iter, data=None):
        total, downloaded = model.get(iter, 3, 4)
        cell.set_property("value", 100.*downloaded/total)

    # Render a file size in a CellRenderer
    def _render_size(self, col, cell, model, iter, data=None):
        size = self._get_size(model, iter)
        if size <= 0:
            size = ""
        elif size < 1024:
            size = locale.format_string(_("%d B"), size, True)
        elif size < 1024**2:
            size = locale.format_string(_("%.1f kB"), size/1024., True)
        elif size < 1024**3:
            size = locale.format_string(_("%.1f MB"), size/(1024.**2), True)
        else:
            size = locale.format_string(_("%.1f GB"), size/(1024.**3), True)
        cell.set_property("text", size)

    # Render a download speed in a CellRenderer
    def _render_speed(self, col, cell, model, iter, data=None):
        speed = model.get_value(iter, 5)
        if speed <= 0.:
            speed = ""
        elif speed < 1024.:
            speed = locale.format_string(_("%d B/s"), int(speed), True)
        elif speed < 1024.**2:
            speed = locale.format_string(_("%.1f kB/s"), speed/1024., True)
        else:
            speed = locale.format_string(_("%.1f MB/s"), speed/(1024.**2), True)
        cell.set_property("text", speed)
    # }}}
    # {{{ Button callbacks
    # Cancel the current download
    def cancel_download(self, data=None):
        if self.dl_cur_id >= 0:
            self.dl_cancel = True
        else:
            self.status.push(self.sb_ctxt["queue"], _("Nothing to cancel."))

    # Download selected items
    def download(self, data=None):
        sel = self.tvf.get_selection()
        model, rows = sel.get_selected_rows()
        if len(rows) == 0:
            return

        dls = []
        for row in rows:
            tree_iter = model.get_iter(row)
            dls.extend(self._get_download(model, tree_iter))

        for size, url, path in dls:
            if len(url) > 0:
                self.list.append((self.dl_id, path, url, size, 0, 0.))
                self.dl_id += 1

        self.dl_event.set()

    # Refresh the TreeView using the Put.io API
    def refresh(self, data=None):
        t = threading.Thread(target=self._fetch_folder_data, args=(0, None, ""))
        t.daemon = True
        self.status.push(self.sb_ctxt["files"], _("Refreshing files list..."))
        self.tree.clear()
        t.start()

    # Remove selected items
    def remove(self, data=None):
        sel = self.tvf.get_selection()
        model, rows = sel.get_selected_rows()
        if len(rows) == 0:
            return
        
        names = []
        ids = []
        refs = []
        for row in rows:
            tree_iter = model.get_iter(row)
            name, id_ = model.get(tree_iter, 0, 3)
            ref = gtk.TreeRowReference(model, row)
            names.append(name)
            ids.append(id_)
            refs.append(ref)

        txt = _("The following items will be removed:\n%s\nAre you sure you want to remove them?")
        files = ""
        for name in names:
            files += "- %s\n" % name
        txt = txt % files

        dlg = gtk.MessageDialog(self.win, gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                                gtk.MESSAGE_QUESTION, gtk.BUTTONS_YES_NO, txt)
        dlg.set_title(_("Really remove?"))
        resp = dlg.run()

        if resp == gtk.RESPONSE_YES:
            for id_ in ids:
                item = self.api.get_items(id=id_)[0]
                item.delete_item()
            for ref in refs:
                path = ref.get_path()
                if path is not None:
                    tree_iter = model.get_iter(path)
                    model.remove(tree_iter)
        dlg.destroy()

    # Remove selected items from the download queue
    def remove_download(self, data=None):
        sel = self.tvd.get_selection()
        model, rows = sel.get_selected_rows()
        refs = [gtk.TreeRowReference(model, row) for row in rows]
        removed = 0

        for ref in refs:
            path = ref.get_path()
            if path is not None:
                it = model.get_iter(path)
                id_ = model.get_value(it, 0)
                if id_ != self.dl_cur_id:
                    model.remove(it)
                    removed += 1

        self.status.push(self.sb_ctxt["queue"],
                         ngettext("1 download cancelled",
                                  "%(rm)d downloads cancelled", removed) % {"rm": removed})
    # }}}
    # {{{ Internal (boring) stuff
    # Get an icon from the default theme, using a cache if possible
    def _get_icon(self, name):
        # Try from cache
        if name in self.icons:
            return self.icons[name]

        # Not in cache --> try to get it from Gtk and cache it
        pb = self.theme.load_icon(name, 16, 0)
        self.icons[name] = pb
        return pb
    # }}}
    # {{{ Internal functions dealing with the data stores
    # Fetch data from a Put.io folder and add it in the TreeStore
    def _fetch_folder_data(self, root, parent, path):
        try:
            items = self.api.get_items(parent_id=root, limit=0)
        except putio.PutioError:
            return
        dirs = []
        for it in items:
            pb = self._get_icon(TYPE_TO_ICON[it.type])                
            it_path = os.path.join(path, it.name)
            tree_iter = self.tree.append(parent,
                                         (it.name, long(it.size), pb, int(it.id),
                                          it.download_url, it_path))
            if it.is_dir:
                dirs.append((it.id, tree_iter, it_path))

        for (it_id, tree_iter, it_path) in dirs:
            try:
                self._fetch_folder_data(it_id, tree_iter, it_path)
            except putio.PutioError, e:
                if str(e) != "You have no items to show.":
                    raise e

        if parent is None:
            self.status.push(self.sb_ctxt["files"], _("Files list updated."))

    # Grab data needed to download the specified tree_iter and its children from
    # the TreeStore
    def _get_download(self, model, tree_iter):
        if model.iter_has_child(tree_iter):
            tab = []
            it = model.iter_children(tree_iter)
            while it is not None:
                t = self._get_download(model, it)
                tab.extend(t)
                it = model.iter_next(it)
            return tab
        else:
            size, url, path = model.get(tree_iter, 1, 4, 5)
            return [(size, url, path)]

    # Get the size of an item in the TreeStore
    def _get_size(self, model, iter):
        # Is it a file or a folder?
        if model.iter_has_child(iter):
            # Folder
            size = 0
            for i in xrange(model.iter_n_children(iter)):
                child = model.iter_nth_child(iter, i)
                size += self._get_size(model, child)
            return size
        else:
            # File
            return model.get_value(iter, 1)
    # }}}
    # {{{ Download manager
    # Download manager thread
    def _download_thread(self):
        # Loop forever
        while not self.dl_quit:
            # {{{ Get an item to download
            # Try to fetch the item with the lowest possible order index that
            # has not been downloaded yet from the ListStore
            tree_iter = None
            order = -1
            cur_tree_iter = self.list.get_iter_first()
            while cur_tree_iter is not None:
                if self.list.get_value(cur_tree_iter, 4) == 0:
                    cur_order = self.list.get_value(cur_tree_iter, 0)
                    if tree_iter is None or cur_order < order:
                        tree_iter = cur_tree_iter
                        order = cur_order
                cur_tree_iter = self.list.iter_next(cur_tree_iter)

            # If nothing is available, wait until something happens and try again
            if tree_iter is None:
                self.dl_event.wait()
                self.dl_event.clear()
                continue
            # }}}
            # {{{ Prepare the required data
            # If we have something, grab more informations
            fname, url, total_size = self.list.get(tree_iter, 1, 2, 3)

            # Construct an absolute path
            name = os.path.join(os.path.expanduser("~"), "Downloads", fname)
            try:
                os.makedirs(os.path.dirname(name))
            except OSError:
                pass
            
            # Already downloaded?
            done = False
            if os.path.isfile(name) and os.path.getsize(name) == total_size:
                self.list.set_value(tree_iter, 4, total_size)
                done = True
            # }}}
            # {{{ Do the download
            # Not downloaded yet: do it
            while not done:
                # {{{ Curl setup
                size = 0
                if os.path.isfile(name):
                    size = os.path.getsize(name)
                fp = open(name, "ab")

                curl = pycurl.Curl()
                curl.setopt(pycurl.URL, url)
                curl.setopt(pycurl.WRITEDATA, fp)
                #curl.setopt(pycurl.VERBOSE, 1)
                curl.setopt(pycurl.NOSIGNAL, 1)
                curl.setopt(pycurl.USERPWD, "%s:%s" % (self.username, self.password))
                curl.setopt(pycurl.FOLLOWLOCATION, 1)
                curl.setopt(pycurl.MAXREDIRS, 10)
                curl.setopt(pycurl.UNRESTRICTED_AUTH, 1)
                if size > 0:
                    curl.setopt(pycurl.RESUME_FROM, size)

                # Progress callback
                curl.setopt(pycurl.NOPROGRESS, 0)
                curl.setopt(pycurl.PROGRESSFUNCTION, self._make_progress_callback(tree_iter, size))
                # }}}
                # {{{ Actual download
                # Now do the download
                self.status.push(self.sb_ctxt["queue"], _("Downloading %s...") % fname)
                self.dl_cur_id = order
                try:
                    curl.perform()
                except pycurl.error, e:
                    # Check that the download was not "aborted by callback",
                    # i.e. cancelled by the user
                    if e.args[0] != pycurl.E_ABORTED_BY_CALLBACK:
                        traceback.print_exc(file=sys.stderr)
                        sys.stderr.flush()
                finally:
                    self.dl_cur_id = -1
                    curl.close()
                    fp.close()
                # }}}
                # {{{ Check results
                # Check if everything went fine
                size = os.path.getsize(name)
                self.list.set(tree_iter, 4, size, 5, 0.)
                if size == total_size:
                    # Download went fine: schedule its removal from the queue
                    done = True
                    self.status.push(self.sb_ctxt["queue"], _("%s downloaded successfuly.") % fname)
                    glib.timeout_add(10000, self._download_remove, tree_iter)

                elif self.dl_cancel:
                    # Download was cancelled: remove it now
                    done = True
                    self.status.push(self.sb_ctxt["queue"], _("Download of %s has been cancelled.") % fname)
                    self.dl_cancel = False
                    self._download_remove(tree_iter)

                else:
                    # Download failed: try again soon
                    self.status.push(self.sb_ctxt["queue"], _("Download failed, trying again in a few seconds..."))
                    print "Something went wrong, trying again in a few seconds"
                    print "Got %d bytes, expected %d" % (size, total_size)
                    time.sleep(5)
                # }}}
            # }}}

    # Create a progress callback that can be used while downloading tree_iter
    def _make_progress_callback(self, tree_iter, dl_offset):
        def __progress(dl_t, dl_d, up_t, up_d):
            # Use function attribute as a static variable. Store the
            # last values of timestamp + downloaded size, and use that
            # to compute the current download speed
            speed = 0.
            dl_d += dl_offset
            cur = (time.time(), dl_d)
            force_redisplay = False
            if len(__progress.tot) == 0:
                __progress.tot.append(cur)
            else:
                # Check if the previous one is older than a second
                last = __progress.tot[-1]
                if cur[0] - last[0] >= 1.:
                    # Yes: update the variable
                    __progress.tot.append(cur)
                    __progress.tot = __progress.tot[-5:]
                    first = __progress.tot[0]
                    speed = (cur[1] - first[1]) / (cur[0] - first[0])
                    force_redisplay = True
            # Update the counters
            self.list.set_value(tree_iter, 4, dl_d)
            if speed > 0.:
                self.list.set_value(tree_iter, 5, speed)
            if force_redisplay:
                self.tvd.queue_draw()
            # If the download is being cancelled, return non-zero
            if self.dl_cancel:
                return 1
        __progress.tot = []
        return __progress

    # Remove a finished download from the ListStore
    def _download_remove(self, tree_iter):
        self.list.remove(tree_iter)
    # }}}

if __name__ == "__main__":
    # i18n
    gettext.install("gputio", unicode=True, names=("ngettext",))

    # Find config file, trying to be XDG compliant:
    # http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html

    # First find all the dirs where the config file would be, ending with the
    # current one
    dirs = []
    if "XDG_CONFIG_HOME" in os.environ and len(os.environ["XDG_CONFIG_HOME"]) > 0:
        d = os.path.join(os.environ["XDG_CONFIG_HOME"], "gputio")
        dirs.append(d)
    else:
        dirs.append(os.path.expanduser("~/.config"))
    if "XDG_CONFIG_DIRS" in os.environ and len(os.environ["XDG_CONFIG_DIRS"]) > 0:
        d = [os.path.join(d, "gputio") for d in os.environ["XDG_CONFIG_DIRS"].split(":")]
        dirs.extend(d)
    else:
        dirs.append("/etc/xdg/gputio")
    dirs.append(".")

    # Then detect which of these dirs actually have a suitable config file
    fns = [os.path.join(d, "gputio.conf") for d in dirs]
    fns = [fn for fn in fns if os.path.isfile(fn)]

    # Exit if no configuration file was found
    if len(fns) == 0:
        print >>sys.stderr, "No configuration file was found! Please create one and try again."
        print >>sys.stderr, "(An sample configuration file is provided with GPutio.)"
        sys.exit(1)
    
    # Read config file
    config = ConfigParser.SafeConfigParser()
    config.read((fns[0],))
    username = config.get("account", "username")
    password = config.get("account", "password")
    apikey = config.get("api", "key")
    apisecret = config.get("api", "secret")

    gobject.threads_init()
    gputio = GPutIO(username, password, apikey, apisecret)
    gtk.main()
